import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
dataset = pd.read_csv('/content/Iris.csv')
dataset.head()


# Pasamos los datos a variables de caracteristicas y objetivo
features = cluster[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]
target = cluster['Outcome']
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)


# Normalizamos los datos de caracteristicas
K = 2
kmeans = KMeans(n_clusters=K, random_state=42)
kmeans.fit(scaled_features)
centroids = kmeans.cluster_centers_
labels = kmeans.labels_
cluster['Cluster'] = labels
print("Cluster Centroids:")
print(pd.DataFrame(centroids, columns=features.columns))


# Aplicamos PCA a los datos
pca = PCA(n_components=2)
reduced_features = pca.fit_transform(scaled_features)


# Aplicamos k medias, pueden agregar aqui el metodo del codo
plt.scatter(reduced_features[cluster['Cluster'] == 0, 0], reduced_features[cluster['Cluster'] == 0, 1], color='red', label='Cluster 1')
plt.scatter(reduced_features[cluster['Cluster'] == 1, 0], reduced_features[cluster['Cluster'] == 1, 1], color='blue', label='Cluster 2')
plt.scatter(centroids[:, 0], centroids[:, 1], color='green', marker='X', s=100, label='Centroids')
plt.xlabel('Principal Component 1 (PC1)')
plt.ylabel('Principal Component 2 (PC2)')
plt.legend()
plt.title('K-Means Clustering of iris Data (PCA-reduced)')
plt.show()
